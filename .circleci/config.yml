version: 2.0
jobs:
  build_backend:
    working_directory: ~/witchcraft
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/mysql
    steps:
      - checkout
      - restore_cache:
          keys:
            - witchcraft-app-{{ checksum "WitchcraftApp/build.gradle" }}
            - witchcraft-app-
      - run:
          name: Build
          command: |
            DATABASE_NAME=circle_test \
            DATABASE_USERNAME=root \
            DATABASE_HOST=127.0.0.1 \
            ./gradlew witchcraft-app:build
      - save_cache:
          key: witchcraft-app-{{ checksum "WitchcraftApp/build.gradle" }}
          paths:
            - .gradle
      - store_test_results:
          path: WitchcraftApp/build/test-results
      - persist_to_workspace:
          root: WitchcraftApp/build/libs
          paths:
            - witchcraft-app-0.0.1-SNAPSHOT.jar
  deploy_backend_dev:
    working_directory: ~/witchcraft
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: WitchcraftApp/build/libs
      - run:
          name: Setup CF cli
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s "$CF_SPACE_DEVELOPMENT"
      - run:
          name: Deploy to dev
          command: |
            cd WitchcraftApp
            cf push -f manifest-development.yml

  build_frontend:
    working_directory: ~/witchcraft
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            - witchcraft-node-modules-{{ checksum "Frontend/package-lock.json" }}
            - witchcraft-node-modules-
      - restore_cache:
          keys:
            - witchcraft-app-{{ checksum "Frontend/build.gradle" }}
            - witchcraft-app-
      - run:
          name: Build
          command: ./gradlew frontend:build
      - save_cache:
          key: witchcraft-node-modules-{{ checksum "Frontend/package-lock.json" }}
          paths:
            - node_modules
      - save_cache:
          key: witchcraft-app-{{ checksum "Frontend/build.gradle" }}
          paths:
            - .gradle
      - store_test_results:
          path: Frontend/build/test-results
      - persist_to_workspace:
          root: Frontend/build/dist
          paths:
            - ./*.js
            - ./*.png
            - package.json
            - index.html
  deploy_frontend_dev:
    working_directory: ~/witchcraft
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: Frontend/build/dist
      - run:
          name: Setup CF cli
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s "$CF_SPACE_DEVELOPMENT"
      - run:
          name: Deploy to dev
          command: |
            cd Frontend
            cf push -f manifest-development.yml

  run_integration_tests:
    working_directory: ~/witchcraft
    docker:
      - image: circleci/node:latest-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - witchcraft-node-modules-{{ checksum "e2e/package-lock.json" }}
            - witchcraft-node-modules-
      - restore_cache:
          keys:
            - witchcraft-app-{{ checksum "e2e/build.gradle" }}
            - witchcraft-app-
      - run:
          name: Run Integration Tests
          command: APP_URL=https://witchcraft-frontend-dev.cfapps.io BACKEND_URL=https://witchcraft-backend-dev.cfapps.io ./gradlew e2e:test
      - save_cache:
          key: witchcraft-node-modules-{{ checksum "e2e/package-lock.json" }}
          paths:
            - node_modules
      - save_cache:
          key: witchcraft-app-{{ checksum "e2e/build.gradle" }}
          paths:
            - .gradle
      - store_test_results:
          path: e2e/build/test-results

  deploy_backend_staging:
    working_directory: ~/witchcraft
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: WitchcraftApp/build/libs
      - run:
          name: Setup CF cli
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s "$CF_SPACE_STAGING"
      - run:
          name: Deploy to staging
          command: |
            cd WitchcraftApp
            cf push -f manifest-staging.yml
  deploy_frontend_staging:
    working_directory: ~/witchcraft
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: Frontend/build/dist
      - run:
          name: Setup CF cli
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.run.pivotal.io
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s "$CF_SPACE_STAGING"
      - run:
          name: Deploy to staging
          command: |
            cd Frontend
            cf push -f manifest-staging.yml

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_backend:
          filters:
            branches:
              only:
                - master
      - deploy_backend_dev:
          filters:
            branches:
              only:
                - master
          requires:
            - build_backend
      - build_frontend:
          filters:
            branches:
              only:
                - master
      - deploy_frontend_dev:
          filters:
            branches:
              only:
                - master
          requires:
            - build_frontend
      - run_integration_tests:
          filters:
            branches:
              only:
                - master
          requires:
            - deploy_backend_dev
            - deploy_frontend_dev
      - deploy_backend_staging:
          filters:
            branches:
              only:
                - master
          requires:
            - run_integration_tests
      - deploy_frontend_staging:
          filters:
            branches:
              only:
                - master
          requires:
            - run_integration_tests